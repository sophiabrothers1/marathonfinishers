#| eval: true
#| warning: false
#| message: false
# Generate model predictions for the filtered dataset
marathon_data_filtered <- marathon_data_cleaned %>%
mutate(predicted_time = predict(finisher_model, newdata = marathon_data_cleaned))
# Function to calculate the best group for actual or predicted times
calculate_best_times <- function(data, group_var, time_col) {
data %>%
group_by({{ group_var }}) %>%
filter(n() > 25) %>% # Only include groups with more than 25 entries
summarise(
best_group = as.character(first({{ group_var }})), # Convert to character for consistency
mean_time = mean({{ time_col }}, na.rm = TRUE),
count = n()
) %>%
ungroup() %>%
arrange(mean_time) %>%
slice_head(n = 1)
}
# Calculate the best groups for actual times
best_age_actual <- calculate_best_times(marathon_data_filtered, age, overall_time_seconds) %>% mutate(category = "Age")
best_gender_actual <- calculate_best_times(marathon_data_filtered, gender, overall_time_seconds) %>% mutate(category = "Gender")
best_race_count_actual <- calculate_best_times(marathon_data_filtered, races_count, overall_time_seconds) %>% mutate(category = "Races Count")
best_iaaf_category_actual <- calculate_best_times(marathon_data_filtered, iaaf_category, overall_time_seconds) %>% mutate(category = "IAAF Category")
# Combine actual results into a single table
actual_table <- bind_rows(best_age_actual, best_gender_actual, best_race_count_actual, best_iaaf_category_actual) %>%
select(
category,
best_group, mean_time, count
) %>%
rename(
"Actual Best Group" = best_group,
"Actual Mean Time (seconds)" = mean_time,
)
# Format the actual table for display
actual_table_display <- kable(actual_table, align = c("l", "l", "c", "c")) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
#| label: tbl-actual
#| tbl-cap: Actual Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on actual marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Generate model predictions for the filtered dataset
marathon_data_filtered <- marathon_data_cleaned %>%
mutate(predicted_time = predict(finisher_model, newdata = marathon_data_cleaned))
# Function to calculate the best group for actual or predicted times
calculate_best_times <- function(data, group_var, time_col) {
data %>%
group_by({{ group_var }}) %>%
filter(n() > 25) %>% # Only include groups with more than 25 entries
summarise(
best_group = as.character(first({{ group_var }})), # Convert to character for consistency
mean_time = mean({{ time_col }}, na.rm = TRUE),
count = n()
) %>%
ungroup() %>%
arrange(mean_time) %>%
slice_head(n = 1)
}
# Calculate the best groups for actual times
best_age_actual <- calculate_best_times(marathon_data_filtered, age, overall_time_seconds) %>% mutate(category = "Age")
best_gender_actual <- calculate_best_times(marathon_data_filtered, gender, overall_time_seconds) %>% mutate(category = "Gender")
best_race_count_actual <- calculate_best_times(marathon_data_filtered, races_count, overall_time_seconds) %>% mutate(category = "Races Count")
best_iaaf_category_actual <- calculate_best_times(marathon_data_filtered, iaaf_category, overall_time_seconds) %>% mutate(category = "IAAF Category")
# Combine actual results into a single table
actual_table <- bind_rows(best_age_actual, best_gender_actual, best_race_count_actual, best_iaaf_category_actual) %>%
select(
category,
best_group, mean_time, count
) %>%
rename(
"Actual Best Group" = best_group,
"Actual Mean Time (seconds)" = mean_time,
)
# Format the actual table for display
actual_table_display <- kable(actual_table, align = c("l", "l", "c")) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
#| label: tbl-actual
#| tbl-cap: Actual Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on actual marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Generate model predictions for the filtered dataset
marathon_data_filtered <- marathon_data_cleaned %>%
mutate(predicted_time = predict(finisher_model, newdata = marathon_data_cleaned))
# Function to calculate the best group for actual or predicted times
calculate_best_times <- function(data, group_var, time_col) {
data %>%
group_by({{ group_var }}) %>%
filter(n() > 25) %>% # Only include groups with more than 25 entries
summarise(
best_group = as.character(first({{ group_var }})), # Convert to character for consistency
mean_time = mean({{ time_col }}, na.rm = TRUE)
) %>%
ungroup() %>%
arrange(mean_time) %>%
slice_head(n = 1)
}
# Calculate the best groups for actual times
best_age_actual <- calculate_best_times(marathon_data_filtered, age, overall_time_seconds) %>% mutate(category = "Age")
best_gender_actual <- calculate_best_times(marathon_data_filtered, gender, overall_time_seconds) %>% mutate(category = "Gender")
best_race_count_actual <- calculate_best_times(marathon_data_filtered, races_count, overall_time_seconds) %>% mutate(category = "Races Count")
best_iaaf_category_actual <- calculate_best_times(marathon_data_filtered, iaaf_category, overall_time_seconds) %>% mutate(category = "IAAF Category")
# Combine actual results into a single table
actual_table <- bind_rows(best_age_actual, best_gender_actual, best_race_count_actual, best_iaaf_category_actual) %>%
select(
category,
best_group, mean_time
) %>%
rename(
"Actual Best Group" = best_group,
"Actual Mean Time (seconds)" = mean_time
)
# Format the actual table for display
actual_table_display <- kable(actual_table, align = c("l", "l", "c")) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
#| label: tbl-actual
#| tbl-cap: Actual Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on actual marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Generate model predictions for the filtered dataset
marathon_data_filtered <- marathon_data_cleaned %>%
mutate(predicted_time = predict(finisher_model, newdata = marathon_data_cleaned))
# Function to calculate the best group for actual or predicted times
calculate_best_times <- function(data, group_var, time_col) {
data %>%
group_by({{ group_var }}) %>%
filter(n() > 25) %>% # Only include groups with more than 25 entries
summarise(
best_group = as.character(first({{ group_var }})), # Convert to character for consistency
mean_time = mean({{ time_col }}, na.rm = TRUE)
) %>%
ungroup() %>%
arrange(mean_time) %>%
slice_head(n = 1)
}
# Calculate the best groups for actual times
best_age_actual <- calculate_best_times(marathon_data_filtered, age, overall_time_seconds) %>% mutate(category = "Age")
best_gender_actual <- calculate_best_times(marathon_data_filtered, gender, overall_time_seconds) %>% mutate(category = "Gender")
best_race_count_actual <- calculate_best_times(marathon_data_filtered, races_count, overall_time_seconds) %>% mutate(category = "Races Count")
best_iaaf_category_actual <- calculate_best_times(marathon_data_filtered, iaaf_category, overall_time_seconds) %>% mutate(category = "IAAF Category")
# Combine actual results into a single table
actual_table <- bind_rows(best_age_actual, best_gender_actual, best_race_count_actual, best_iaaf_category_actual) %>%
select(
category,
best_group, mean_time
) %>%
rename(
"Actual Best Group" = best_group,
"Actual Mean Time (seconds)" = mean_time
)
# Format the actual table for display
actual_table_display <- kable(actual_table, align = c("l", "l", "c")) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
#| include: false
#| warning: false
#| message: false
# Install Packages if not downloaded:
required_packages <- c(
"tidyverse", "here", "arrow", "ggplot2", "kableExtra", "modelsummary"
)
for (p in required_packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p, character.only = TRUE)
}
}
# load libraries
library(tidyverse)
library(dplyr)
library(here)
library(arrow)
library(ggplot2)
library(kableExtra)
library(modelsummary)
# load data
cleaned_data <- read_parquet(here::here("data/analysis_data/marathon_results_cleaned.parquet"))
#| label: fig-timesdistribution
#| fig-cap: "Distribution of marathon finish times, highlighting the concentration around the 4-hour mark. The skew towards longer finish times reflects the diverse abilities of participants."
#| echo: false
#| eval: true
#| warning: false
#| message: false
# create histogram of finish times
ggplot(cleaned_data, aes(x = overall_time_seconds)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Marathon Finish Times",
x = "Finish Time (seconds)",
y = "Frequency"
) +
theme_minimal()
#| label: fig-agedistribution
#| fig-cap: "Distribution of runners' ages, showing a wide range of participation with a peak in the 30-40 age group, a common range for competitive runners."
#| echo: false
#| eval: true
#| warning: false
#| message: false
# create histogram of finish times
ggplot(cleaned_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Age",
x = "Age",
y = "Frequency"
) +
theme_minimal()
#| label: fig-countrydistribution
#| fig-cap: "Distribution of marathon participants by country, limited to those with more than 100 runners. The United States has the highest number of participants, followed by several other countries with a smaller but significant representation."
#| echo: false
#| eval: true
#| warning: false
#| message: false
filtered_data <- cleaned_data %>%
group_by(iaaf_category) %>%
filter(n() > 100) %>%
ungroup()
ggplot(filtered_data, aes(x = iaaf_category)) +
geom_bar(fill = "skyblue", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Runners by Country (IAAF Category)",
x = "Country (IAAF Category)",
y = "Number of Runners"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability
#| label: fig-genderdistribution
#| fig-cap: "Gender distribution among marathon participants, revealing a relatively even split, with a slight predominance of male runners."
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Gender distribution plot
ggplot(cleaned_data, aes(x = gender, fill = gender)) +
geom_bar(alpha = 0.7) +
labs(
title = "Gender Distribution of Runners",
x = "Gender",
y = "Count"
) +
theme_minimal()
#| label: fig-racecountdistribution
#| fig-cap: "Distribution of the number of races completed by runners, indicating that most participants are relatively inexperienced, with a smaller number of highly experienced runners."
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Adjusted binwidth and zoomed-in distribution plot
ggplot(cleaned_data, aes(x = races_count)) +
geom_histogram(binwidth = 1, fill = "purple", color = "black", alpha = 0.7) +
labs(
title = "Distribution of Races Count",
x = "Number of Races",
y = "Frequency"
) +
theme_minimal() +
xlim(0, 50) # Set x-axis limits to zoom in on more common values
#| include: false
#| warning: false
#| message: false
finisher_model <- readRDS(here::here("models/finisher_model.rds"))
# Clean the data: Remove rows with missing values, convert 'overall_time' to numeric (seconds), and ensure 'gender' is a factor
marathon_data_cleaned <- cleaned_data %>%
filter(!is.na(overall_time_seconds), !is.na(gender), !is.na(country_code)) %>%
mutate(
# Recode gender values to a more interpretable form
gender = recode(gender, "M" = "Male", "W" = "Female", "X" = "Other"), # Adjust "X" as needed
gender = as.factor(gender), # Ensure gender is a factor variable
overall_time_seconds = as.numeric(overall_time_seconds), # Convert overall_time to seconds if it's not already
country_code = as.factor(country_code), # Ensure country_code is a factor
races_count = as.integer(races_count) # Ensure races_count is an integer
)
marathon_data_cleaned$predicted_time <- predict(finisher_model, newdata = marathon_data_cleaned)
#| label: tbl-keysummary
#| tbl-cap: Summary of the marathon finishing time model, which includes age, gender, and race count. The table presents the model coefficients along with their standard errors.
#| echo: false
#| eval: true
#| warning: false
#| message: false
modelsummary(finisher_model,
output = "kableExtra",
statistic = "std.error",
coef_map = c(
"(Intercept)" = "GenderMale",
"genderFemale" = "GenderFemale",
"genderOther" = "GenderOther",
"age" = "Age",
"races_count" = "Race Count"
)
) %>%
kable_styling(latex_options = c("striped", "scale_down"))
#| label: tbl-marathon-summary
#| tbl-cap: Summary statistics of the marathon data, including the average finish time, average age, and total number of participants analyzed.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Determine summary statistics
summary_stats <- cleaned_data %>%
summarise(
AverageFinishTime = mean(overall_time_seconds / 60, na.rm = TRUE),
AverageAge = mean(age),
AveragePace = mean(pace_seconds / 60, na.rm = TRUE),
TotalParticipants = n()
)
# Display summary statistics
summary_stats %>%
kable(
col.names = c("Average Finish Time (minutes)", "Average Age (years)", "Average Pace (minutes/mile)", "Total Participants"),
digits = 2,
booktabs = TRUE
) %>%
kable_styling(latex_options = c("striped", "scale_down"))
#| label: fig-predicted-vs-actual-age
#| fig-cap: Predicted vs Actual Marathon Finishing Times by Age Group. The scatter plot shows how well the predicted finishing times compare with the actual times across different age groups, with a reference line indicating perfect predictions.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Create age groups for segmentation
marathon_data_cleaned$age_group <- cut(marathon_data_cleaned$age,
breaks = c(18, 30, 40, 50, 60, 70, 80),
labels = c("18-30", "31-40", "41-50", "51-60", "61-70", "71-80")
)
# Predicted vs Actual by Age Group
ggplot(marathon_data_cleaned, aes(x = overall_time_seconds / 60, y = predicted_time / 60, color = age_group)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") + # Add reference line for perfect predictions
labs(
title = "Predicted vs. Actual Time by Age Group",
x = "Actual Time (minutes)",
y = "Predicted Time (minutes)"
) +
theme_minimal() +
theme(legend.title = element_blank()) +
facet_wrap(~age_group)
#| label: fig-predicted-time-gender
#| fig-cap: Predicted Marathon Finishing Times by Gender. The boxplot displays the distribution of predicted marathon times for different genders, showing median values and variability in finishing times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Predicted time by gender
ggplot(marathon_data_cleaned, aes(x = gender, y = predicted_time / 60, color = gender)) +
geom_boxplot() +
labs(
title = "Predicted Time by Gender",
x = "Gender",
y = "Predicted Time (minutes)"
) +
theme_minimal()
#| label: fig-predicted-time-age
#| fig-cap: Predicted Marathon Finishing Times by Age Group. This boxplot visualizes the predicted marathon times across various age groups, showing how age influences the predicted finishing times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Predicted time by age
ggplot(marathon_data_cleaned, aes(x = age_group, y = predicted_time / 60, color = age_group)) +
geom_boxplot() +
labs(
title = "Predicted Time by Age",
x = "Age",
y = "Predicted Time (minutes)"
) +
theme_minimal()
#| label: tbl-actual
#| tbl-cap: Actual Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on actual marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Generate model predictions for the filtered dataset
marathon_data_filtered <- marathon_data_cleaned %>%
mutate(predicted_time = predict(finisher_model, newdata = marathon_data_cleaned))
# Function to calculate the best group for actual or predicted times
calculate_best_times <- function(data, group_var, time_col) {
data %>%
group_by({{ group_var }}) %>%
filter(n() > 25) %>% # Only include groups with more than 25 entries
summarise(
best_group = as.character(first({{ group_var }})), # Convert to character for consistency
mean_time = mean({{ time_col }}, na.rm = TRUE)
) %>%
ungroup() %>%
arrange(mean_time) %>%
slice_head(n = 1)
}
# Calculate the best groups for actual times
best_age_actual <- calculate_best_times(marathon_data_filtered, age, overall_time_seconds) %>% mutate(category = "Age")
best_gender_actual <- calculate_best_times(marathon_data_filtered, gender, overall_time_seconds) %>% mutate(category = "Gender")
best_race_count_actual <- calculate_best_times(marathon_data_filtered, races_count, overall_time_seconds) %>% mutate(category = "Races Count")
best_iaaf_category_actual <- calculate_best_times(marathon_data_filtered, iaaf_category, overall_time_seconds) %>% mutate(category = "IAAF Category")
# Combine actual results into a single table
actual_table <- bind_rows(best_age_actual, best_gender_actual, best_race_count_actual, best_iaaf_category_actual) %>%
select(
category,
best_group, mean_time
) %>%
rename(
"Actual Best Group" = best_group,
"Actual Mean Time (seconds)" = mean_time
)
# Format the actual table for display
actual_table_display <- kable(actual_table, align = c("l", "l", "c")) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
# Display both tables individually
actual_table_display  # Display Actual Times Table
#| label: tbl-predicted
#| tbl-cap: Predicted Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on predicted marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Calculate the best groups for predicted times
best_age_predicted <- calculate_best_times(marathon_data_filtered, age, predicted_time) %>% mutate(category = "Age")
best_gender_predicted <- calculate_best_times(marathon_data_filtered, gender, predicted_time) %>% mutate(category = "Gender")
best_race_count_predicted <- calculate_best_times(marathon_data_filtered, races_count, predicted_time) %>% mutate(category = "Races Count")
best_iaaf_category_predicted <- calculate_best_times(marathon_data_filtered, iaaf_category, predicted_time) %>% mutate(category = "IAAF Category")
# Combine predicted results into a single table
predicted_table <- bind_rows(best_age_predicted, best_gender_predicted, best_race_count_predicted, best_iaaf_category_predicted) %>%
select(
category,
best_group, mean_time, count
) %>%
rename(
"Predicted Best Group" = best_group,
"Predicted Mean Time (seconds)" = mean_time,
"Predicted Count" = count
)
#| label: tbl-predicted
#| tbl-cap: Predicted Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on predicted marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Calculate the best groups for predicted times
best_age_predicted <- calculate_best_times(marathon_data_filtered, age, predicted_time) %>% mutate(category = "Age")
best_gender_predicted <- calculate_best_times(marathon_data_filtered, gender, predicted_time) %>% mutate(category = "Gender")
best_race_count_predicted <- calculate_best_times(marathon_data_filtered, races_count, predicted_time) %>% mutate(category = "Races Count")
best_iaaf_category_predicted <- calculate_best_times(marathon_data_filtered, iaaf_category, predicted_time) %>% mutate(category = "IAAF Category")
# Combine predicted results into a single table
predicted_table <- bind_rows(best_age_predicted, best_gender_predicted, best_race_count_predicted, best_iaaf_category_predicted) %>%
select(
category,
best_group, mean_time, count
) %>%
rename(
"Predicted Best Group" = best_group,
"Predicted Mean Time (seconds)" = mean_time,
)
#| label: tbl-predicted
#| tbl-cap: Predicted Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on predicted marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Calculate the best groups for predicted times
best_age_predicted <- calculate_best_times(marathon_data_filtered, age, predicted_time) %>% mutate(category = "Age")
best_gender_predicted <- calculate_best_times(marathon_data_filtered, gender, predicted_time) %>% mutate(category = "Gender")
best_race_count_predicted <- calculate_best_times(marathon_data_filtered, races_count, predicted_time) %>% mutate(category = "Races Count")
best_iaaf_category_predicted <- calculate_best_times(marathon_data_filtered, iaaf_category, predicted_time) %>% mutate(category = "IAAF Category")
# Combine predicted results into a single table
predicted_table <- bind_rows(best_age_predicted, best_gender_predicted, best_race_count_predicted, best_iaaf_category_predicted) %>%
select(
category,
best_group, mean_time, count
) %>%
rename(
"Predicted Best Group" = best_group,
"Predicted Mean Time (seconds)" = mean_time
)
#| label: tbl-predicted
#| tbl-cap: Predicted Marathon Finishing Times by Group. This table shows the best group (age, gender, race count, IAAF category) based on predicted marathon times.
#| echo: false
#| eval: true
#| warning: false
#| message: false
# Calculate the best groups for predicted times
best_age_predicted <- calculate_best_times(marathon_data_filtered, age, predicted_time) %>% mutate(category = "Age")
best_gender_predicted <- calculate_best_times(marathon_data_filtered, gender, predicted_time) %>% mutate(category = "Gender")
best_race_count_predicted <- calculate_best_times(marathon_data_filtered, races_count, predicted_time) %>% mutate(category = "Races Count")
best_iaaf_category_predicted <- calculate_best_times(marathon_data_filtered, iaaf_category, predicted_time) %>% mutate(category = "IAAF Category")
# Combine predicted results into a single table
predicted_table <- bind_rows(best_age_predicted, best_gender_predicted, best_race_count_predicted, best_iaaf_category_predicted) %>%
select(
category,
best_group, mean_time
) %>%
rename(
"Predicted Best Group" = best_group,
"Predicted Mean Time (seconds)" = mean_time
)
# Format the predicted table for display
predicted_table_display <- kable(predicted_table, align = c("l", "l", "c")) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
predicted_table_display  # Display Predicted Times Table
styler::style_file("paper/paper.qmd")
styler::style_file("paper/references.bib")
styler::style_file("scripts/00-simulate_data.R")
styler::style_file("scripts/01-test_simulated_data.R")
styler::style_file("scripts/02-download_data.R")
styler::style_file("scripts/03-clean_data.R")
styler::style_file("scripts/04-test_analysis_data.R")
styler::style_file("scripts/05-exploratory_data_analysis.R")
styler::style_file("scripts/06-model_data.R")
styler::style_file("scripts/07-validation.R")
styler::style_file("shiny app/time_predictor.R")
